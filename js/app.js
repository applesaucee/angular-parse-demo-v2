/*
    app.js
    code for our demo application
 */

"use strict";

//this is the base URL for all task objects managed by your application
//requesting this with a GET will get all tasks objects
//sending a POST to this will insert a new task object
//sending a PUT to this URL + '/' + task.objectId will update an existing task
//sending a DELETE to this URL + '/' + task.objectId will delete an existing task
var tasksUrl = 'https://api.parse.com/1/classes/tasks';

angular.module('ToDoApp', [])
    .config(function($httpProvider) {
        //Parse required two extra headers sent with every HTTP request: X-Parse-Application-Id, X-Parse-REST-API-Key
        //the first needs to be set to your application's ID value
        //the second needs to be set to your application's REST API key
        //both of these are generated by Parse when you create your application via their web site
        //the following lines will add these as default headers so that they are sent with every
        //HTTP request we make in this application
        $httpProvider.defaults.headers.common['X-Parse-Application-Id'] = 'P2PkYylhDL67qd3cMvrvvAGvTPTokUg1ygJ8espm';
        $httpProvider.defaults.headers.common['X-Parse-REST-API-Key'] = 'qlt4cUh0rwOerc9aZmB0g13e96a15DOuMNAnRucR';
    })

    .controller('TasksController', function($scope, $http) {
        //get all task objects saved by my application on Parse.com
        $scope.refreshTasks = function() {
            $scope.loading = true;
            $http.get('https://api.parse.com/1/classes/tasks/' + '?where={"done" : false}')
                .success(function(responseData) {
                    //when returning a list of data, Parse.com will always
                    //return an object with one property called 'results'
                    //which will contain an array with all the data objects
                    $scope.tasks = responseData.results;
                    console.log($scope.tasks);
                })

                .error(function(err) {
                    console.log(err);
                    //notify the user in some way
                })

                .finally(function() {
                    $scope.loading = false;
                });

        }; //$scope.refreshTasks

        //call the refreshTasks() to get the initial set of tasks on page load
        $scope.refreshTasks();

        //replaced with refresh.tasks
        //get all task objects saved by my application on Parse.com
        /*$http.get('https://api.parse.com/1/classes/tasks')
        .success(function(data) {
             //Parse.com returns an object with one property called 'results'
             //that contains an array of all task objects
             //$scope.tasks = data.results;
        })

        .error(function(err) {
             //error occurred! might want to also tell the user
             console.log(err);
        });
        */

        $scope.newTask = {done: false};

        //function to add a new task to the list
        $scope.addTask = function(task) {

            //POST will add (insert) a new item to the class
            $http.post('https://api.parse.com/1/classes/tasks', task)
                .success(function(responseData) {
                    //Parse.com will return the new objectID in the response data
                    // copy that to the task we just inserted
                    task.objectId = responseData.objectId;

                    //add that task to the task list
                    $scope.tasks.push(task);

                    //reset the newTask to clear the form
                    $scope.newTask = {done: false};
                })

        };

        //function to update an existing task
        $scope.updateTask = function(task) {
            $scope.updating = true;
            $http.put('https://api.parse.com/1/classes/tasks/' + task.objectId, task)
                .success(function(responseData) {
                    //don't need to do anything because the local object is alread up-to-date
                
                })

                .error(function(err) {
                    console.log(err);
                    //notify the user in some way
                })

                .finally(function() {
                    $scope.updating = false;
                });
        };

        
    });